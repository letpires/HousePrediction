import streamlit as st
import pandas as pd
import numpy as np
from joblib import load


# Carregar o pipeline (modelo e scaler)
pipeline = load('/Users/leticiapires/Desktop/HousePrediction/model_pipeline.joblib')
model = pipeline['model']
scaler = pipeline['scaler']
y_transform = pipeline['y_transform']  # Informa√ß√£o sobre a transforma√ß√£o da vari√°vel alvo

# # T√≠tulo do app
# st.title('Previs√£o de Pre√ßos de Im√≥veis')

# T√≠tulo estilizado do app
st.markdown(
    """
    <h1 style='color: #4A90E2; font-size: 42px;'>üè† Previs√£o de Pre√ßos de Im√≥veis</h1>
    """,
    unsafe_allow_html=True
)

# Formul√°rio centralizado
st.markdown("### Insira os dados do im√≥vel")


# Descri√ß√£o escondida usando st.expander
with st.expander("üîç **Descri√ß√£o das Vari√°veis**"):
    st.markdown("""
    - **Quartos**: Quantidade de quartos dispon√≠veis em cada casa.  
    - **Banheiros**: N√∫mero de banheiros dispon√≠veis em cada casa.  
    - **√Årea √∫til**: Tamanho da √°rea √∫til da casa em p√©s quadrados.  
    - **√Årea lote**: √Årea total do terreno em p√©s quadrados, incluindo a √°rea ocupada pela casa e espa√ßos externos, como jardim ou quintal.  
    - **Andares**: N√∫mero de andares dispon√≠veis na casa.  
    - **Vista para √°gua**: Indicador se a casa est√° localizada √† beira de um lago ou praia (0: n√£o possui vista para √°gua, 1: possui).  
    - **Vista**: Avalia√ß√£o visual do im√≥vel com base na vista dispon√≠vel (escala de 0 a 4).  
    - **Classifica√ß√£o**: Classifica√ß√£o da qualidade do design e constru√ß√£o do im√≥vel, em uma escala de 1 a 12.  
    - **Renovado**: 1 se foi renovado, 0 se n√£o foi.  
    - **Por√£o**: 1 se tem basement, 0 se n√£o tem.  
    - **Condi√ß√£o**: Condi√ß√£o geral da casa: 'Ruim', 'M√©dia', 'Regular', 'Boa', 'Excelente' (escala de 1 a 5).  
    """)


# Criando o formul√°rio com as entradas
with st.form(key='form_dados'):
    bedrooms = st.number_input('N√∫mero de quartos', min_value=1, max_value=10, value=3)
    bathrooms = st.number_input('N√∫mero de banheiros', min_value=1, max_value=5, value=2)
    sqft_living = st.number_input('√Årea √∫til (em p√©s¬≤)', min_value=500, max_value=10000, value=1500)
    sqft_lot = st.number_input('Tamanho do lote (em p√©s¬≤)', min_value=500, max_value=50000, value=5000)
    floors = st.number_input('N√∫mero de andares', min_value=1, max_value=3, value=1)
    waterfront = st.selectbox('Possui vista para a √°gua?', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o')
    view = st.slider('Vista (escala de 0 a 4)', min_value=0, max_value=4, value=0)
    grade = st.slider('Classifica√ß√£o do im√≥vel (1 a 12)', min_value=1, max_value=12, value=7)
    renovated = st.selectbox('Foi renovado?', [0, 1], format_func=lambda x: 'Sim' if x == 1 else 'N√£o')
    basement = st.number_input('Tamanho do por√£o (em p√©s¬≤)', min_value=0, max_value=5000, value=0)
    condition_encoded = st.slider('Condi√ß√£o do im√≥vel (1 a 5)', min_value=1, max_value=5, value=3)

    # Bot√£o de submiss√£o
    submit_button = st.form_submit_button(label='Prever Pre√ßo')

# Processando a previs√£o
if submit_button:
    # Organizar os dados de entrada
    nova_casa = pd.DataFrame({
        'bedrooms': [bedrooms],
        'bathrooms': [bathrooms],
        'sqft_living': [sqft_living],
        'sqft_lot': [sqft_lot],
        'floors': [floors],
        'waterfront': [waterfront],
        'view': [view],
        'grade': [grade],
        'renovated': [renovated],
        'basement': [basement],
        'condition_encoded': [condition_encoded]
    })

    # Normalizar os dados de entrada
    nova_casa_scaled = scaler.transform(nova_casa)

    # Fazer a previs√£o
    y_pred_log = model.predict(nova_casa_scaled)

    # Reverter o log para a escala original, se necess√°rio
    if y_transform == 'log':
        y_pred = np.exp(y_pred_log)
    else:
        y_pred = y_pred_log


    # Mostrar o resultado com estilo
    st.markdown(
        f"""
        <div style='text-align: center; margin-top: 20px;'>
            <h2 style='color: #2E8B57;'>üè° O pre√ßo estimado do im√≥vel √©:</h2>
            <h1 style='color: #FF5733;'>R${y_pred[0]:,.2f}</h1>
        </div>
        """,
        unsafe_allow_html=True
    )
